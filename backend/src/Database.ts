//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { StudentsEntity } from './db/Students.entity';
import { CoursesEntity } from './db/Courses.entity';
import { ExamsEntity } from './db/Exams.entity';
import { DailyPracticeProblemsEntity } from './db/DailyPracticeProblems.entity';
import { ResultsEntity } from './db/Results.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      StudentsEntity,
      CoursesEntity,
      ExamsEntity,
      DailyPracticeProblemsEntity,
      ResultsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Students: [
        {
          Name: 'Name 1',
          Gmail: 'Gmail 1',
          DateOfBirth: '2024-10-07T15:33:24.240Z',
          Number: 1,
          Class: 'Class 1',
          id: 37,
        },
        {
          Name: 'Name 2',
          Gmail: 'Gmail 2',
          DateOfBirth: '2024-07-01T12:30:50.021Z',
          Number: 2,
          Class: 'Class 2',
          id: 0,
        },
        {
          Name: 'Name 3',
          Gmail: 'Gmail 3',
          DateOfBirth: '2025-02-06T07:16:33.029Z',
          Number: 3,
          Class: 'Class 3',
          id: 93,
        },
        {
          Name: 'Name 4',
          Gmail: 'Gmail 4',
          DateOfBirth: '2023-05-31T07:33:32.536Z',
          Number: 4,
          Class: 'Class 4',
          id: 74,
        },
        {
          Name: 'Name 5',
          Gmail: 'Gmail 5',
          DateOfBirth: '2024-08-15T23:20:26.758Z',
          Number: 5,
          Class: 'Class 5',
          id: 68,
        },
      ],
      Courses: [
        { Name: 'Name 1', Description: 'Description 1', id: 82 },
        { Name: 'Name 2', Description: 'Description 2', id: 39 },
        { Name: 'Name 3', Description: 'Description 3', id: 71 },
        { Name: 'Name 4', Description: 'Description 4', id: 81 },
        { Name: 'Name 5', Description: 'Description 5', id: 21 },
      ],
      Exams: [
        { ExamDate: '2023-11-12T04:45:44.623Z', TotalMarks: 1, id: 47 },
        { ExamDate: '2024-03-17T16:56:23.810Z', TotalMarks: 2, id: 84 },
        { ExamDate: '2024-09-14T02:18:56.356Z', TotalMarks: 3, id: 96 },
        { ExamDate: '2023-05-27T23:25:13.284Z', TotalMarks: 4, id: 29 },
        { ExamDate: '2023-08-31T21:59:09.329Z', TotalMarks: 5, id: 71 },
      ],
      DailyPracticeProblems: [
        { ProblemStatement: 'ProblemStatement 1', id: 67 },
        { ProblemStatement: 'ProblemStatement 2', id: 54 },
        { ProblemStatement: 'ProblemStatement 3', id: 19 },
        { ProblemStatement: 'ProblemStatement 4', id: 12 },
        { ProblemStatement: 'ProblemStatement 5', id: 38 },
      ],
      Results: [
        { ResultID: 'ResultID 1', id: 27 },
        { ResultID: 'ResultID 2', id: 93 },
        { ResultID: 'ResultID 3', id: 99 },
        { ResultID: 'ResultID 4', id: 33 },
        { ResultID: 'ResultID 5', id: 65 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('StudentsEntity', data.Students);
      await this.SeedResource('CoursesEntity', data.Courses);
      await this.SeedResource('ExamsEntity', data.Exams);
      await this.SeedResource(
        'DailyPracticeProblemsEntity',
        data.DailyPracticeProblems,
      );
      await this.SeedResource('ResultsEntity', data.Results);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
